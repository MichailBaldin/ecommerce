name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: "1.24"

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go workspace sync
        run: go work sync

      - name: Go mod tidy for all modules
        run: |
          cd services/gateway && go mod tidy
          cd ../users && go mod tidy  
          cd ../products && go mod tidy

      - name: Check if go mod tidy changed anything
        run: git diff --exit-code

      - name: Go vet for all modules
        run: |
          cd services/gateway && go vet ./...
          cd ../users && go vet ./...
          cd ../products && go vet ./...

      - name: Go fmt check for all modules
        run: |
          UNFORMATTED=$(find . -name "*.go" -not -path "./vendor/*" | xargs gofmt -s -l)
          if [ -n "$UNFORMATTED" ]; then
            echo "The following files are not formatted:"
            echo "$UNFORMATTED"
            exit 1
          fi

      - name: Run tests for all modules
        run: |
          cd services/gateway && go test -v ./...
          cd ../users && go test -v ./...
          cd ../products && go test -v ./...

      - name: Build all services
        run: |
          echo "Building gateway..."
          cd services/gateway && go build -v .
          echo "Building users service..."
          cd ../users && go build -v .
          echo "Building products service..."
          cd ../products && go build -v .

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./
          args: --timeout=5m

      - name: Notify Telegram on Success
        if: success()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="HTML" \
            -d text="<b>BUILD SUCCESS</b>%0A<b>Repo:</b> ${{ github.repository }}%0A<b>Branch:</b> ${{ github.ref_name }}%0A<b>Commit:</b> <code>${{ github.sha }}</code>%0A<b>Author:</b> ${{ github.actor }}"

      - name: Notify Telegram on Failure
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="HTML" \
            -d text="<b>BUILD FAILED</b>%0A<b>Repo:</b> ${{ github.repository }}%0A<b>Branch:</b> ${{ github.ref_name }}%0A<b>Commit:</b> <code>${{ github.sha }}</code>%0A<b>Author:</b> ${{ github.actor }}%0A<b>Job:</b> ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
